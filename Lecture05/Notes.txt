#
#
# IGNORE THIS!
# These are the professors notes taken while reading and prepping the class.
# They are not structured at all, just random interesting stuff copy and pasted.
#

Data type affinity, primary keys, time, date.


1. Everything is stored on the backend, deep in the code in one of the storage classes
Each value stored in an SQLite database (or manipulated by the database engine) has one of the following storage classes:

    NULL. The value is a NULL value.

    INTEGER. The value is a signed integer, stored in 0, 1, 2, 3, 4, 6, or 8 bytes depending on the magnitude of the value.

    REAL. The value is a floating point value, stored as an 8-byte IEEE floating point number.

    TEXT. The value is a text string, stored using the database encoding (UTF-8, UTF-16BE or UTF-16LE).

    BLOB. The value is a blob of data, stored exactly as it was input.


2. SQLite looks and acts kind of like the other common dbs, but it can be much more flexible. You can use the familiar column types from other dbs:
Example Typenames From The
CREATE TABLE Statement
or CAST Expression 	Resulting Affinity 	Rule Used To Determine Affinity
INT
INTEGER
TINYINT
SMALLINT
MEDIUMINT
BIGINT
UNSIGNED BIG INT
INT2
INT8 	INTEGER 	1
CHARACTER(20)
VARCHAR(255)
VARYING CHARACTER(255)
NCHAR(55)
NATIVE CHARACTER(70)
NVARCHAR(100)
TEXT
CLOB 	TEXT 	2
BLOB
no datatype specified 	BLOB 	3
REAL
DOUBLE
DOUBLE PRECISION
FLOAT 	REAL 	4
NUMERIC
DECIMAL(10,5)
BOOLEAN
DATE
DATETIME 	NUMERIC 	5 

but these different types are mapped to one of 5 affinities, which are the real datatypes used by sqlite.

Each column in an SQLite 3 database is assigned one of the following type affinities:

    TEXT
    NUMERIC
    INTEGER
    REAL
    BLOB

But keep in mind that these columns can store anything, regardless of the affinity. The affinity just tells you HOW sqlite3 will store the data.
A column with TEXT affinity stores all data using storage classes NULL, TEXT or BLOB. If numerical data is inserted into a column with TEXT affinity it is converted into text form before being stored.

A column with NUMERIC affinity may contain values using all five storage classes. When text data is inserted into a NUMERIC column, the storage class of the text is converted to INTEGER or REAL (in order of preference) if the text is a well-formed integer or real literal, respectively. If the TEXT value is a well-formed integer literal that is too large to fit in a 64-bit signed integer, it is converted to REAL. For conversions between TEXT and REAL storage classes, only the first 15 significant decimal digits of the number are preserved. If the TEXT value is not a well-formed integer or real literal, then the value is stored as TEXT. For the purposes of this paragraph, hexadecimal integer literals are not considered well-formed and are stored as TEXT. (This is done for historical compatibility with versions of SQLite prior to version 3.8.6 2014-08-15 where hexadecimal integer literals were first introduced into SQLite.) If a floating point value that can be represented exactly as an integer is inserted into a column with NUMERIC affinity, the value is converted into an integer. No attempt is made to convert NULL or BLOB values.

A string might look like a floating-point literal with a decimal point and/or exponent notation but as long as the value can be expressed as an integer, the NUMERIC affinity will convert it into an integer. Hence, the string '3.0e+5' is stored in a column with NUMERIC affinity as the integer 300000, not as the floating point value 300000.0.

A column that uses INTEGER affinity behaves the same as a column with NUMERIC affinity. The difference between INTEGER and NUMERIC affinity is only evident in a CAST expression: The expression "CAST(4.0 AS INT)" returns an integer 4, whereas "CAST(4.0 AS NUMERIC)" leaves the value as a floating-point 4.0.

A column with REAL affinity behaves like a column with NUMERIC affinity except that it forces integer values into floating point representation. (As an internal optimization, small floating point values with no fractional component and stored in columns with REAL affinity are written to disk as integers in order to take up less space and are automatically converted back into floating point as the value is read out. This optimization is completely invisible at the SQL level and can only be detected by examining the raw bits of the database file.)

A column with affinity BLOB does not prefer one storage class over another and no attempt is made to coerce data from one storage class into another.





What if you insert a int larger than int max into the table?
sqlite stores  8 byte integers. Wat is the largest one?

What if you enter ascii hex data into the table?
 ascii a is 0x97


https://www.sqlite.org/datatype3.html

https://www.sqlite.org/flextypegood.html

https://www.sqlite.org/stricttables.html


STRICT vs not strict tables:

 Everything else about a STRICT table works the same as it does in an ordinary non-strict table:

    CHECK constraints work the same.
    NOT NULL constraints work the same.
    FOREIGN KEY constraints work the same.
    UNIQUE constraints work the same.
    DEFAULT clauses work the same.
    COLLATE clauses work the same.
    Generated columns work the same.
    ON CONFLICT clauses work the same.
    Indexes work the same.
    AUTOINCREMENT works the same.
    An INTEGER PRIMARY KEY column is an alias for the rowid, but an INT PRIMARY KEY column is not.
    The on-disk format for the table data is the same. 


A WITHOUT ROWID table is an optimization that can reduce storage and processing requirements.

In an ordinary SQLite table, the PRIMARY KEY is really just a UNIQUE index. The key used to look up records on disk is the rowid. The special "INTEGER PRIMARY KEY" column type in ordinary SQLite tables causes the column to be an alias for the rowid, and so an INTEGER PRIMARY KEY is a true PRIMARY KEY. But any other kind of PRIMARY KEYs, including "INT PRIMARY KEY" are just unique indexes in an ordinary rowid table.



